# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#1. Determine top 10 artists and their tracks by average popularity and organize in descending order.

SELECT artist_name
,track_name
,avg(popularity)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name
ORDER BY popularity desc
LIMIT 10
;

# determine the top 10 artists and their tracks by averaging popularity scores, grouping by artist and track, and sorting in descending order to highlight the most popular ones.

#2 Is there a correlation between danceability and energy levels?

SELECT danceability
,energy
FROM BIT_DB.Spotifydata
;

#3 Which tracks have both high energy and high popularity?

SELECT track_name
,artist_name
,energy
,popularity
FROM BIT_DB.Spotifydata
WHERE energy>0.8 
AND popularity>80
ORDER BY popularity desc
;

#I used the this query to find tracks that are both high-energy and highly popular by filtering for energy levels above 0.8 and popularity above 80, then sorting by popularity to highlight the biggest hits.

#4 Calculate the average popularity for the artists in the Spotify data table. Then, for every artist with an average popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”.

WITH popularity_average_CTE AS (
SELECT s.artist_name,
AVG(s.popularity) AS average_popularity
FROM SpotifyData s 
GROUP BY s.artist_name
)
 
SELECT  artist_name,
average_popularity,
'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90
;

#calculate the average popularity for each artist, then filtered for those with an average of 90 or above, labeling them as "Top Stars" to easily identify the most popular artists.














