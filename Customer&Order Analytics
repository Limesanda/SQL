#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data.

#1. How many orders were placed in January?

SELECT COUNT (Quantity) 
FROM BIT_DB.JanSales
WHERE Quantity <> ''
AND Quantity <>'Quantity Ordered'
;

-- Count orders based on recorded quantities, ensuring I only included rows where an actual purchase was made.
-- Using quantity, assuming all real orders have a quantity recorded.

#OR

SELECT COUNT(orderid) 
FROM BIT_DB.JanSales 
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'
;

-- This query counts orders based on valid orderid values, filtering out potential headers or incorrectly formatted entries to ensure accuracy.

#2. How many of those orders were for an iPhone?

SELECT COUNT(orderid)
FROM BIT_DB.JanSales
WHERE Product= 'iPhone'
AND length(orderid) = 6 
AND orderid <> 'Order ID'
;

-- Specifically filtered for Product = 'iPhone' while ensuring valid orderid values to count only iPhone orders.

#3. Select the customer account numbers for all the orders that were placed in February.

SELECT distinct acctnum 
FROM BIT_DB.customers cust 
INNER JOIN BIT_DB.FebSales Feb 
ON cust.order_id=FEB.orderid 
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'
;

-- JOIN is used between the customers and February sales tables to link orders to account numbers, ensuring only valid orders were counted.

#4. Which product was the cheapest one sold in January, and what was the price?

SELECT distinct product, price 
FROM BIT_DB.JanSales 
ORDER BY price ASC LIMIT 1
;  

--This query is used to find the cheapest product by sorting all prices in ascending order and selecting the first result, making it a quick and simple approach.

#OR

SELECT distinct Product, price
FROM BIT_DB.JanSales
WHERE  price in (SELECT min(price) FROM BIT_DB.JanSales)
;

--This query ensures that if multiple products share the lowest price, they are all included in the results by filtering based on the minimum price.

#5. What is the total revenue for each product sold in January?

SELECT SUM(quantity)*price as Revenue 
,product 
FROM BIT_DB.JanSales 
GROUP BY product
;

-- Calculated total revenue per product by multiplying the sum of quantities by the price, ensuring accurate revenue grouping per product.

#6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?

SELECT SUM (Quantity)
,product
,sum(quantity)*price as revenue
FROM BIT_DB.FebSales
WHERE location= '548 Lincoln St, Seattle, WA 98101'
GROUP BY product
;

--I filtered sales by a specific location and grouped by product to get total units sold and revenue per product at that address.

#7. How many customers ordered more than 2 products at a time, and what was the average amount spent for those customers?

SELECT count(distinct cust.acctnum),
avg(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON Feb.orderid=cust.order_id
WHERE Feb.Quantity>2
AND Length(orderid)=6
AND orderid<>'Order ID'
;

-- Counted distinct customers who ordered more than two products in a single transaction and calculated their average spending to analyze high-volume buyers.

#8. List all the products sold in Los Angeles in February, and include how many of each were sold.

SELECT distinct product, SUM(quantity) 
FROM BIT_DB.FebSales
WHERE location like '%Los Angeles%' 
GROUP BY Product
;

#9. Which locations in New York received at least 3 orders in January, and how many orders did they each receive?

SELECT distinct location, count(orderID)
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
AND length(orderid) = 6 
AND orderid <> 'Order ID'
GROUP BY location
HAVING count(orderID)>2
;

-- Grouped orders by location in New York, counted orders per location, and used HAVING >2 to find places that received at least three orders.

#10. How many of each type of headphones were sold in February?

SELECT sum(Quantity) AS quantity
,product
FROM BIT_DB.FebSales
WHERE product LIKE '%Headphones%'
GROUP BY product
;

#11. What was the average amount spent per account in February?

SELECT avg(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'
;

-- Joined the sales and customers tables to link spending to accounts and calculated the average amount spent per account.

#12. What was the average quantity of products purchased per account in February?

SELECT sum(quantity)/count(cust.acctnum)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'
;

-- Summed the total quantities purchased and divided by the number of unique accounts to determine the average number of products per customer.

#13. Which product brought in the most revenue in January and how much revenue did it bring in total?

SELECT product, 
sum(quantity*price)
FROM BIT_DB.JanSales 
GROUP BY product
ORDER BY sum(quantity*price) desc 
LIMIT 1
;

-- Grouped sales by product, calculated total revenue per product, and sorted in descending order with a limit of 1 row to find the highest-earning product.

